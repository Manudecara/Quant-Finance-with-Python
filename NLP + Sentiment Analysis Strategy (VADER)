#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 25 10:24:11 2020

@author: manu
"""


#VADER Sentiment Analysis


#from VADER import the sentiment analyzer
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer


#lets run an example to see how it works
analyzer = SentimentIntensityAnalyzer()


sentences = ["Naman is smart, boring, and creative.",  # base example
             "Naman is smart, boring, and creative!!!!!!",  # using punctuations
             "Naman is SMART, boring, and CREATIVE.",  # using CAPS
             "Naman is smart, boring, and super creative.",  # using degree modifiers (example 1)
             "Naman is smart, slightly boring, and creative.",  # using degree modifiers (example 2)
             "Naman is smart, boring, and creative but procrastinates a lot.",  # Polarity shift due to Conjunctions
             "Naman isn't smart at all.",  # Catching Polarity Negation
             ]

comments = ["  - base example",
           "  - using punctuations",
           "  - using CAPS",
           "  - using degree modifiers (example 1)",
           "  - using degree modifiers (example 2)",
           "  - Polarity shift due to Conjunctions",
           "  - Catching Polarity Negation"]


analyzer = SentimentIntensityAnalyzer()

for i in range(len(sentences)):
    vs = analyzer.polarity_scores(sentences[i])
    print("{:-<65} {:-<65} {}".format(sentences[i], comments[i],  str(vs)))


#Applying VADER to Bitcoin
import pandas as pd
import numpy as np

import pandas_datareader as pdr
import matplotlib.pyplot as plt

#Call Bitcoin (Recent Dates)
df = pdr.get_data_yahoo('BTC-USD', '5-dec-20') 
df.head()


#NEWS API
import requests
url = ('https://newsapi.org/v2/everything?'
       'apiKey=38f21e1352734e52b742fea01ce50374')


# Specify the query and number of returns
parameters = {
    'q': 'Bitcoin', # query phrase
    'sortBy': 'popularity', # articles from popular sources and publishers come first
    'pageSize': 100,  # maximum is 100 for developer version
    'apiKey': 'YOUR-KEY', # your own API key
}

# Make the request
response = requests.get(url, params=parameters)

# Convert the response to JSON format and store it in dataframe
data = pd.DataFrame(response.json())
news_df = pd.concat([data['articles'].apply(pd.Series)], axis=1)

#Get headline and time only
final_news = news_df.loc[:,['publishedAt','title']]
final_news['publishedAt'] = pd.to_datetime(final_news['publishedAt'])
final_news.sort_values(by='publishedAt',inplace=True)

#Apply VADER and add it to dataframe
cs = []
for row in range(len(final_news)):
    cs.append(analyzer.polarity_scores(final_news['title'].iloc[row])['compound'])
final_news['compound_vader_score'] = cs
final_news = final_news[(final_news[['compound_vader_score']] != 0).all(axis=1)].reset_index(drop=True)
final_news.head()


# VADER trade calls - with threshold
vader_Buy=[]
vader_Sell=[]
vader_Hold=[]

for i in range(len(final_news)):
    if final_news['compound_vader_score'].values[i] > 0.20:
        print("Trade Call for {row} is Buy.")
        vader_Buy.append(final_news['publishedAt'].iloc[i].date())
    elif final_news['compound_vader_score'].values[i] < -0.20:
        print("Trade Call for {row} is Sell.")
        vader_Sell.append(final_news['publishedAt'].iloc[i].date())
    elif (final_news['compound_vader_score'].values[i] > -0.20) & (final_news['compound_vader_score'].values[i] < 0.20):
        print("Trade Call for {row} is Hold.")
        vader_Hold.append(final_news['publishedAt'].iloc[i].date())


vader_buy = []
for i in range(len(df)):
    if df.index[i].date() in vader_Buy:
        vader_buy.append(i)
        
vader_sell = []
for i in range(len(df)):
    if df.index[i].date() in vader_Sell:
        vader_sell.append(i)
        
vader_hold = []
for i in range(len(df)):
    if df.index[i].date() in vader_Hold:
        vader_hold.append(i)
        
        
plt.figure(figsize=(20, 10),dpi=80)
plt.plot(df.index, df['Close'],'-^', markevery=vader_buy, ms=15, color='green')
plt.plot(df.index, df['Close'],'-v', markevery=vader_sell, ms=15, color='red')
plt.plot(df.index, df['Close'])
plt.xlabel('Date',fontsize=14)
plt.ylabel('Price in Dollars', fontsize = 14)
plt.xticks(rotation='60',fontsize=12)
plt.yticks(fontsize=12)
plt.title('Trade Calls - VADER', fontsize = 16)
plt.legend(['Buy','Sell','Close'])
plt.grid()
plt.show() 




#TWITTER

max_tweets=5000
start_date='2016-12-31'
end_date='2018-12-31'
query='Bitcoin'
def tweet_hist(query, start_date, end_date, max_tweets):
    tweet_criteria = got.manager.TweetCriteria().setQuerySearch(query).setSince(start_date).setUntil(end_date).setMaxTweets(max_tweets).setTopTweets(True)
    tweets = got.manager.TweetManager.getTweets(tweet_criteria)

    for i in range(len(tweets)):
        d = {'date':tweets[i].date, 'tweet_id':tweets[i].id, 'tweet_username':tweets[i].username,'tweet_text':tweets[i].text}
        if i == 0:
            df = pd.DataFrame.from_dict(d,orient='index').T
            df.index = df['date']
            df = df.drop('date', axis=1)
        else:
            df2 = pd.DataFrame.from_dict(d,orient='index').T
            df2.index = df2['date']
            df2 = df2.drop('date', axis=1)
            df = df.append(df2)
    
    return df
tweets_df=tweet_hist(query, start_date, end_date, max_tweets)
tweets_df.head(20)
